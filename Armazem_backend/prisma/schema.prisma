generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StockRole {
  ADMIN
  MEMBER
}

enum AccessStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AgendamentoStatus {
  PENDING
  SENT
  EXECUTED
  CANCELED
  FAILED
}

enum AlertaTipo {
  ABAIXO_MINIMO
  RUPTURA
  EXCESSO
}

model Usuario {
  id                 Int     @id @default(autoincrement())
  nome               String? @db.VarChar(255)
  email              String  @unique @db.VarChar(255)
  matricula          Int?
  senha              String? @db.VarChar(255)

  roles              UsuarioRole[]
  estoques           UsuarioEstoque[]
  passwordResetToken PasswordResetToken[]
  notificacoes       Notificacao[]
  agendamentos       TransferenciaAgendada[]
  transferencias     Transferencia[]

  estoqueTelegramNotify EstoqueTelegramNotify[]
  accessRequests        StockAccessRequest[]    @relation("RequestOwner")
  approvedRequests      StockAccessRequest[]    @relation("StockRequestApprover")
  cookies               Ciente_cookies[]

  @@map("usuarios")
}

model Ciente_cookies {
  id            Int    @id @default(autoincrement())
  userId        Int
  ciencia        Boolean

  user Usuario @relation(fields: [userId], references: [id])
}

model Equipamento {
  id             Int                     @id @default(autoincrement())
  nome           String?                 @map("equipamento") @db.VarChar(255)
  quantidade     Int?
  data           DateTime?               @db.Date
  transferencias Transferencia[]
  estoqueItens   EstoqueItem[]
  agendamentos   TransferenciaAgendada[]

  @@map("equipamentos")
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  userId    Int
  tokenHash String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user Usuario @relation(fields: [userId], references: [id])

  @@unique([tokenHash])
  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model Estoque {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(100)

  transferenciasDestino Transferencia[] @relation("TransferenciasDestino")
  transferenciasOrigem  Transferencia[] @relation("TransferenciasOrigem")
  itens                 EstoqueItem[]

  agendamentosOrigem  TransferenciaAgendada[] @relation("AgendamentoOrigem") // ← novo
  agendamentosDestino TransferenciaAgendada[] @relation("AgendamentoDestino") // ← novo

  usuarios              UsuarioEstoque[]
  estoqueTelegramNotify EstoqueTelegramNotify[]
  requests              StockAccessRequest[]

  @@map("estoques")
}

model UsuarioEstoque {
  usuarioId Int
  estoqueId Int
  role      StockRole @default(MEMBER)

  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  estoque Estoque @relation(fields: [estoqueId], references: [id], onDelete: Cascade)

  @@id([usuarioId, estoqueId])
  @@map("usuarios_estoques")
}

model Notificacao {
  id        Int       @id @default(autoincrement())
  userId    Int
  type      String
  title     String
  message   String
  refId     Int?
  readAt    DateTime?
  createdAt DateTime  @default(now())

  usuario Usuario @relation(fields: [userId], references: [id])
}

model StockAccessRequest {
  id         Int          @id @default(autoincrement())
  estoqueId  Int
  usuarioId  Int
  status     AccessStatus @default(PENDING)
  reason     String?      @db.VarChar(255)
  approverId Int?
  decidedAt  DateTime?
  createdAt  DateTime     @default(now())

  estoque  Estoque  @relation(fields: [estoqueId], references: [id], onDelete: Cascade)
  usuario  Usuario  @relation("RequestOwner", fields: [usuarioId], references: [id], onDelete: Cascade)
  approver Usuario? @relation("StockRequestApprover", fields: [approverId], references: [id])

  @@unique([estoqueId, usuarioId, status], name: "unique_pending_per_user_stock_status")
}

model Transferencia {
  id                Int       @id @default(autoincrement())
  itemId            Int
  estoqueOrigemId   Int
  estoqueDestinoId  Int
  quantidade        Int
  dataTransferencia DateTime? @default(now()) @db.Timestamptz(6)

  usuarioId   Int?
  usuario     Usuario?               @relation(fields: [usuarioId], references: [id])
  agendamento TransferenciaAgendada?

  item    Equipamento @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  origem  Estoque     @relation("TransferenciasOrigem", fields: [estoqueOrigemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  destino Estoque     @relation("TransferenciasDestino", fields: [estoqueDestinoId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([usuarioId])
  @@map("transferencias")
}

model EstoqueItem {
  id          Int          @id @default(autoincrement())
  estoqueId   Int
  itemId      Int
  quantidade  Int          @default(0)
  minimo      Int          @default(0)
  alertaAtivo Boolean       @default(false)

  estoque     Estoque       @relation(fields: [estoqueId], references: [id])
  item        Equipamento   @relation(fields: [itemId], references: [id])

  alertas     AlertaEstoque[]

  @@unique([itemId, estoqueId], name: "itemId_estoqueId")
  @@map("estoque_itens")
}

model AlertaEstoque {
  id         Int         @id @default(autoincrement())
  estoqueId  Int
  itemId     Int
  tipo       AlertaTipo
  mensagem   String
  resolvido  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  resolvedAt DateTime?

  estoqueItem EstoqueItem @relation(fields: [itemId, estoqueId], references: [itemId, estoqueId])

  @@index([estoqueId, itemId, resolvido])
  @@map("alertas_estoque")
}

model Role {
  id   Int    @id @default(autoincrement())
  nome String @unique @db.VarChar(50)

  usuarios        UsuarioRole[]
  perms           RolePerm[]
  rotasPermitidas PermissaoOnRoute[]

  @@map("permissoes")
}

model UsuarioRole {
  usuarioId Int @map("usuarioId")
  roleId    Int @map("permissaoId")

  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([usuarioId, roleId])
  @@map("usuarios_permissoes")
}

model Permission {
  id   Int     @id @default(autoincrement())
  code String  @unique
  desc String?

  roles RolePerm[]

  @@map("permissions")
}

model RolePerm {
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("roles_permissions")
}

model Route {
  id         Int                @id @default(autoincrement())
  nome       String
  path       String
  permissoes PermissaoOnRoute[]
  createdAt  DateTime           @default(now())
  // @@map("routes")
}

model PermissaoOnRoute {
  id          Int @id @default(autoincrement())
  permissaoId Int
  routeId     Int

  permissao Role  @relation(fields: [permissaoId], references: [id])
  route     Route @relation(fields: [routeId], references: [id])
}

model EstoqueTelegramNotify {
  id        Int      @id @default(autoincrement())
  usuarioId Int?
  estoqueId Int
  chatId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usuario Usuario? @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  estoque Estoque  @relation(fields: [estoqueId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, estoqueId], name: "usuario_estoque_unique")
  @@index([estoqueId])
}

model TransferenciaAgendada {
  id               Int      @id @default(autoincrement())
  itemId           Int
  estoqueOrigemId  Int
  estoqueDestinoId Int
  quantidade       Int
  usuarioId        Int
  executarEm       DateTime @db.Timestamptz(6)

  status              AgendamentoStatus @default(PENDING)
  tentativas          Int               @default(0)
  erroUltimaTentativa String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transferenciaId Int?           @unique
  transferencia   Transferencia? @relation(fields: [transferenciaId], references: [id])

  item    Equipamento @relation(fields: [itemId], references: [id], onDelete: Restrict)
  origem  Estoque     @relation("AgendamentoOrigem", fields: [estoqueOrigemId], references: [id], onDelete: Restrict)
  destino Estoque     @relation("AgendamentoDestino", fields: [estoqueDestinoId], references: [id], onDelete: Restrict)
  usuario Usuario     @relation(fields: [usuarioId], references: [id], onDelete: Restrict)

  @@index([status, executarEm])
  @@index([usuarioId])
  @@index([itemId, estoqueOrigemId, estoqueDestinoId])
  @@map("transferencias_agendadas")
}

model MovimentacaoEstoque {
  id           Int      @id @default(autoincrement())
  itemId       Int
  estoqueId    Int
  tipo         String
  quantidade   Int
  referenciaId Int?
  createdAt    DateTime @default(now())
}